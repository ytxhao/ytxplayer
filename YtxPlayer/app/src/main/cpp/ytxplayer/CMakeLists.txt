# Sets the minimum version of CMake required to build the native
# library. You should either keep the default value or only pass a
# value of 3.4.0 or lower.

cmake_minimum_required(VERSION 3.4.1)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds it for you.
# Gradle automatically packages shared libraries with your APK.
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti -fno-exceptions -Wall")

add_library( # Sets the name of the library.
             native-ytx-lib

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
             # Associated headers in the same location as their source
             # file are automatically included.
             src/android_media_YtxMediaPlayer.cpp
             src/YtxMediaPlayer.cpp
             src/Thread.cpp
             src/PacketQueue.cpp
             src/Decoder.cpp
             src/decoder_video.cpp
             src/decoder_audio.cpp
             src/decoder_subtitle.cpp
             src/frame_queue.cpp
             src/frame_queue_audio.cpp
             src/frame_queue_video.cpp
             src/frame_queue_subtitle.cpp
             src/audio_engine.cpp
             src/lock.cpp
             src/VideoRefreshController.cpp
             src/VideoStateInfo.cpp
             src/playerPrepareAsync.cpp
             src/MessageQueue.cpp
             src/MessageLoop.cpp
             src/AudioRefreshController.cpp
             src/test.c
             )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because system libraries are included in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

find_library( # Sets the name of the path variable.
            EGL-lib

            # Specifies the name of the NDK library that
            # you want CMake to locate.
            EGL )

find_library( # Sets the name of the path variable.
            GLESv2-lib

            # Specifies the name of the NDK library that
            # you want CMake to locate.
            GLESv2 )

find_library( # Sets the name of the path variable.
            OpenSLES-lib

            # Specifies the name of the NDK library that
            # you want CMake to locate.
            OpenSLES )

#----------------------------------------------------------------

set(LINK_DIR "${Project_SOURCE_DIR}/../jniLibs/armeabi-v7a")


#message(FATAL_ERROR "Invalid Android INC_DIR result: "${Project_BINARY_DIR}")
#include_directories(${Project_SOURCE_DIR}/../cpp/include ${Project_SOURCE_DIR}/../cpp/include/ytxplayer)

find_library(png-lib
                NAMES "png"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )

find_library(harfbuzz-lib
              NAMES "harfbuzz"
              PATHS ${LINK_DIR}
              NO_CMAKE_ENVIRONMENT_PATH
              NO_CMAKE_PATH
              NO_SYSTEM_ENVIRONMENT_PATH
              NO_CMAKE_SYSTEM_PATH
              NO_CMAKE_FIND_ROOT_PATH
            )

find_library(freetype-lib
                NAMES "freetype"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )



find_library(iconv-lib
              NAMES "iconv"
              PATHS ${LINK_DIR}
              NO_CMAKE_ENVIRONMENT_PATH
              NO_CMAKE_PATH
              NO_SYSTEM_ENVIRONMENT_PATH
              NO_CMAKE_SYSTEM_PATH
              NO_CMAKE_FIND_ROOT_PATH
            )

find_library(xml2-lib
                NAMES "xml2"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )


find_library(fontconfig-lib
              NAMES "fontconfig"
              PATHS ${LINK_DIR}
              NO_CMAKE_ENVIRONMENT_PATH
              NO_CMAKE_PATH
              NO_SYSTEM_ENVIRONMENT_PATH
              NO_CMAKE_SYSTEM_PATH
              NO_CMAKE_FIND_ROOT_PATH
            )


find_library(fribidi-lib
              NAMES "fribidi"
              PATHS ${LINK_DIR}
              NO_CMAKE_ENVIRONMENT_PATH
              NO_CMAKE_PATH
              NO_SYSTEM_ENVIRONMENT_PATH
              NO_CMAKE_SYSTEM_PATH
              NO_CMAKE_FIND_ROOT_PATH
            )

find_library(ass-lib
              NAMES "ass"
              PATHS ${LINK_DIR}
              NO_CMAKE_ENVIRONMENT_PATH
              NO_CMAKE_PATH
              NO_SYSTEM_ENVIRONMENT_PATH
              NO_CMAKE_SYSTEM_PATH
              NO_CMAKE_FIND_ROOT_PATH
            )



find_library(avutil-lib
                NAMES "avutil"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )

find_library(swscale-lib
                NAMES "swscale"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
            )

find_library(swresample-lib
                NAMES "swresample"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )
find_library(avcodec-lib
                NAMES "avcodec"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
            )
find_library(avformat-lib
                NAMES "avformat"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )

find_library(avfilter-lib
                NAMES "avfilter"
                PATHS ${LINK_DIR}
                NO_CMAKE_ENVIRONMENT_PATH
                NO_CMAKE_PATH
                NO_SYSTEM_ENVIRONMENT_PATH
                NO_CMAKE_SYSTEM_PATH
                NO_CMAKE_FIND_ROOT_PATH
              )


#-----------------------------------------------------------------
# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in the
# build script, prebuilt third-party libraries, or system libraries.

#MESSAGE(STATUS "lsx result: " "${LINK_DIR}/libavformat.so")
#message(FATAL_ERROR "Invalid Android lsx2 result: " "${avformat-lib}   ${LINK_DIR}")

target_link_libraries( # Specifies the target library.
                       native-ytx-lib

                       # Links the target library to the log library
                       # included in the NDK.

                       ${log-lib}
                       ${EGL-lib}
                       ${GLESv2-lib}
                       ${OpenSLES-lib}
                       ${png-lib}
                       ${harfbuzz-lib}
                       ${freetype-lib}
                       ${iconv-lib}
                       ${xml2-lib}
                       ${fontconfig-lib}
                       ${fribidi-lib}
                       ${ass-lib}
                       ${avutil-lib}
                       ${swscale-lib}
                       ${swresample-lib}
                       ${avcodec-lib}
                       ${avformat-lib}
                       ${avfilter-lib}
                       native-gl-lib
                       )